using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
public class BossController : MonoBehaviour
{
    [Header("Refs")]
    [Tooltip("Boss ï¿½ï¿½ï¿½Ïµï¿½ Animatorï¿½ï¿½×´Ì¬ï¿½ï¿½ AC_Boss ï¿½ï¿½ï¿½ï¿½ï¿½â£©")]
    public Animator anim;
    [Tooltip("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×¶ï¿½ï¿½ï¿½ï¿½ï¿½ AnimationClipï¿½ï¿½ï¿½ï¿½ï¿½Ú¼ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È´ï¿½ï¿½")]
    public AnimationClip breathClip;

    [Header("VFX (optional)")]
    [Tooltip("ï¿½ï¿½ï¿½Ç°/ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å£¨ï¿½ï¿½Õ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎµÈ£ï¿½ï¿½ï¿½Îªï¿½Õ£ï¿½")]
    public GameObject fireCone;
    [Tooltip("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½Îªï¿½Õ£ï¿½")]
    public ParticleSystem fireFX;

    [Header("Fireball Projectile")]
    [Tooltip("ï¿½ï¿½ï¿½ï¿½Ä³ï¿½ï¿½ï¿½ï¿½ã£¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç°ï¿½ï¿½")]
    public Transform fireMuzzle;
    [Tooltip("ï¿½ï¿½ï¿½ï¿½Ô¤ï¿½ï¿½ï¿½å£¨ï¿½ï¿½ï¿½ï¿½ FireballProjectile.csï¿½ï¿½")]
    public GameObject fireballPrefab;
    [Tooltip("ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð©ï¿½ã£¨ï¿½ï¿½Ø¹ï¿½ Playerï¿½ï¿½")]
    public LayerMask fireballTargetLayers = ~0;

    [Header("Control / Test")]
    [Tooltip("ï¿½ï¿½Ý¼ï¿½ï¿½ï¿½ï¿½ï¿½ K ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½")]
    public KeyCode breathKey = KeyCode.K;

    [Header("Facing (optional)")]
    [Tooltip("ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½Boss ï¿½ï¿½ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½")]
    public Transform player;
    public bool autoFacePlayer;

    [Header("Cooldown")]
    [Tooltip("ï¿½ï¿½ï¿½ï¿½Üµï¿½ï¿½ï¿½Ð¡ï¿½ï¿½È´ï¿½ï¿½ï¿½ë£©ï¿½ï¿½ï¿½ï¿½Ð¡ï¿½Ú¶ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¹ï¿½Ã¶ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½")]
    public float breathCooldown = 1.0f;

    // ï¿½Ú²ï¿½×´Ì¬
    bool busy = false;
    float nextBreathTime = 0f;
    Rigidbody2D rb;

    void Awake()
    {
        if (!anim) anim = GetComponentInChildren<Animator>();
        rb = GetComponent<Rigidbody2D>();
    }

    void Update()
    {
        // ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
        if (autoFacePlayer && player)
        {
            float dx = player.position.x - transform.position.x;
            if (Mathf.Abs(dx) > 0.02f)
            {
                var s = transform.localScale;
                s.x = Mathf.Sign(dx) * Mathf.Abs(s.x);
                transform.localScale = s;
            }
        }

        // ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
        if (Input.GetKeyDown(breathKey))
            TriggerBreath();
    }

    /// <summary>ï¿½ï¿½ï¿½ï¿½Ó¿Ú£ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½</summary>
    public void TriggerBreath()
    {
        if (busy) return; // <-- ÒÑÐÞ¸´£ºÈç¹ûÕýÃ¦£¬¾ÍÖ±½ÓÍË³ö
        if (!anim || !breathClip) return;
        if (Time.time < nextBreathTime) return; // ï¿½ï¿½È´ï¿½ï¿½

        busy = true;

        anim.ResetTrigger("Breath");
        anim.SetTrigger("Breath");              // ×´Ì¬ï¿½ï¿½ï¿½ï¿½ AnyState ï¿½ï¿½ Boss_Breath Ê¹ï¿½ï¿½ Trigger: Breath

        // ï¿½ï¿½È´ = max(ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½, ï¿½è¶¨ï¿½ï¿½È´)
        float total = breathClip.length / Mathf.Max(0.0001f, anim.speed);
        nextBreathTime = Time.time + Mathf.Max(total, breathCooldown);
        Invoke(nameof(EndBusy), total);
    }

    void EndBusy() => busy = false;

    // ========= ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â¼ï¿½ï¿½ï¿½ï¿½ï¿½ =========
    // ï¿½ï¿½ Boss_Breath ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ø¼ï¿½Ö¡ï¿½ï¿½ï¿½ï¿½ï¿½Â¼ï¿½ï¿½ï¿½AnimEvent_StartBreath / AnimEvent_SpawnFireball / AnimEvent_StopBreath

    /// <summary>Ç°Ò¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½ð£¨´ò¿ª½ï¿½Õ½ï¿½ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½Ó£ï¿½</summary>
    public void AnimEvent_StartBreath()
    {
        if (fireCone) fireCone.SetActive(true);
        if (fireFX) fireFX.Play();
    }

    /// <summary>ï¿½ï¿½ï¿½ï¿½Ö¡ï¿½ï¿½ï¿½ï¿½ï¿½É»ï¿½ï¿½ï¿½Ô¶ï¿½Ìµï¿½ï¿½ï¿½</summary>
    public void AnimEvent_SpawnFireball()
    {
        if (!fireballPrefab) return;

        Vector3 spawnPos = fireMuzzle ? fireMuzzle.position : transform.position;
        bool faceRight = transform.lossyScale.x >= 0f;
        Vector2 dir = faceRight ? Vector2.right : Vector2.left;

        var go = Instantiate(fireballPrefab, spawnPos, Quaternion.identity);
        var proj = go.GetComponent<FireballProjectile>();
        if (proj)
        {
            // ï¿½Ñ·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð²ã´«ï¿½ï¿½Í¶ï¿½ï¿½ï¿½ï£¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô¼ï¿½ & ï¿½ï¿½È·ï¿½ï¿½ï¿½Ë²ï¿½
            proj.Init(transform, fireballTargetLayers);
            proj.Launch(dir, faceRight);
        }
    }

    /// <summary>ï¿½ï¿½ï¿½Ð£ï¿½ï¿½Ø±Õ»ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½</summary>
    public void AnimEvent_StopBreath()
    {
        if (fireCone) fireCone.SetActive(false);
        if (fireFX) fireFX.Stop();
    }

#if UNITY_EDITOR
    void OnValidate()
    {
        if (!anim) anim = GetComponentInChildren<Animator>();
    }
#endif
}